package main

import (
	"fmt"
)

// 给定一个递增循环整数数组，从里面找出最小的元素，使用的算法越快越好。特别地，最小的元素可能出现在数组中间。比如：50, 52, 63, 90, 3, 8, 15, 44。

// returns the index of the minium number in an array
func findMinInRotatedArray(array []int) int {
	left, right := 0, len(array)-1
	if right == -1 {
		return -1
	}
	if right == 0 {
		return array[0]
	}

	mid := left + (right-left)/2
	for mid >= 0 && mid < len(array) {
		leftSort := array[mid] > array[left]
		rightSort := array[mid] < array[right]
		if leftSort && rightSort {
			// ok, this part is compleletly sorted
			return left
		}
		if leftSort {
			// right is not sorted, our element is in right, move left
			left = mid + 1
		}
		if rightSort {
			right = mid
		}
		mid = left + (right-left)/2
	}
	return -1
}

func main() {
	a := []int{50, 52, 63, 90, 3, 8, 15, 44}
	fmt.Println(findMinInRotatedArray(a))
	b := []int{1, 2, 3, 4, 5}
	fmt.Println(findMinInRotatedArray(b))
}
